'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _constants = require('../../constants');

var _constants2 = _interopRequireDefault(_constants);

var _column = require('./components/column');

var _column2 = _interopRequireDefault(_column);

var _constants3 = require('./constants');

var _constants4 = _interopRequireDefault(_constants3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var breakpoints = [null].concat(Object.keys(_constants2.default.BREAKPOINTS).map(function (key) {
  return _constants2.default.BREAKPOINTS[key];
}));

var Columns = function (_PureComponent) {
  _inherits(Columns, _PureComponent);

  function Columns() {
    _classCallCheck(this, Columns);

    return _possibleConstructorReturn(this, (Columns.__proto__ || Object.getPrototypeOf(Columns)).apply(this, arguments));
  }

  _createClass(Columns, [{
    key: 'render',
    value: function render() {
      var _classNames;

      var _props = this.props,
          children = _props.children,
          className = _props.className,
          breakpoint = _props.breakpoint,
          gapless = _props.gapless,
          multiline = _props.multiline,
          centered = _props.centered,
          props = _objectWithoutProperties(_props, ['children', 'className', 'breakpoint', 'gapless', 'multiline', 'centered']);

      return _react2.default.createElement(
        'div',
        _extends({}, props, {
          className: (0, _classnames2.default)(className, 'columns', (_classNames = {}, _defineProperty(_classNames, 'is-' + breakpoint, breakpoint), _defineProperty(_classNames, 'is-gapless', gapless), _defineProperty(_classNames, 'is-multiline', multiline), _defineProperty(_classNames, 'is-centered', centered), _classNames))
        }),
        children
      );
    }
  }]);

  return Columns;
}(_react.PureComponent);

Columns.propTypes = {
  children: _propTypes2.default.node,
  className: _propTypes2.default.string,
  style: _propTypes2.default.shape({}),
  /**
   * Breakpoint where columns become stacked.
   */
  breakpoint: _propTypes2.default.oneOf(breakpoints),
  /**
   * `true` to remove space between columns
   */
  gapless: _propTypes2.default.bool,
  /**
   * `true` if you want to use more than one line if you add more column elements that would fit in a single row.
   */
  multiline: _propTypes2.default.bool,
  /**
   * `true` you want the columns inside to be horizontaly centered
   */
  centered: _propTypes2.default.bool
};
Columns.defaultProps = {
  children: null,
  className: '',
  style: {},
  breakpoint: null,
  gapless: false,
  centered: false,
  multiline: true
};
Columns.Column = _column2.default;
Columns.CONSTANTS = _constants4.default;
exports.default = Columns;
//# sourceMappingURL=columns.js.map
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _constants = require('../constants');

var _constants2 = _interopRequireDefault(_constants);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var sizes = [null, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].concat(Object.keys(_constants2.default.SIZES).map(function (key) {
  return _constants2.default.SIZES[key];
}));

var Column = function (_PureComponent) {
  _inherits(Column, _PureComponent);

  function Column() {
    _classCallCheck(this, Column);

    return _possibleConstructorReturn(this, (Column.__proto__ || Object.getPrototypeOf(Column)).apply(this, arguments));
  }

  _createClass(Column, [{
    key: 'render',
    value: function render() {
      var _classNames;

      var _props = this.props,
          children = _props.children,
          className = _props.className,
          size = _props.size,
          offset = _props.offset,
          narrow = _props.narrow,
          mobile = _props.mobile,
          tablet = _props.tablet,
          desktop = _props.desktop,
          widescreen = _props.widescreen,
          fullhd = _props.fullhd,
          mobileSize = _props.mobileSize,
          tabletSize = _props.tabletSize,
          desktopSize = _props.desktopSize,
          widescreenSize = _props.widescreenSize,
          fullhdSize = _props.fullhdSize,
          mobileOffset = _props.mobileOffset,
          tabletOffset = _props.tabletOffset,
          desktopOffset = _props.desktopOffset,
          widescreenOffset = _props.widescreenOffset,
          fullhdOffset = _props.fullhdOffset,
          props = _objectWithoutProperties(_props, ['children', 'className', 'size', 'offset', 'narrow', 'mobile', 'tablet', 'desktop', 'widescreen', 'fullhd', 'mobileSize', 'tabletSize', 'desktopSize', 'widescreenSize', 'fullhdSize', 'mobileOffset', 'tabletOffset', 'desktopOffset', 'widescreenOffset', 'fullhdOffset']);

      if (mobileSize || tabletSize || desktopSize || widescreenSize || fullhdSize || mobileOffset || tabletOffset || desktopOffset || widescreenOffset || fullhdOffset) {
        // eslint-disable-next-line no-console
        console.warn('DEPRECATION Warning: The props: mobileSize tabletSize desktopSize widescreenSize fullhdSize mobileOffset tabletOffset desktopOffset widescreenOffset fullhdOffset are deprecated, please use the mobile.size... alternatives');
      }

      return _react2.default.createElement(
        'div',
        _extends({}, props, {
          className: (0, _classnames2.default)(className, 'column', (_classNames = {}, _defineProperty(_classNames, 'is-' + size, size), _defineProperty(_classNames, 'is-' + (mobile.size || mobileSize) + '-mobile', mobile.size || mobileSize), _defineProperty(_classNames, 'is-' + (tablet.size || tabletSize) + '-tablet', tablet.size || tabletSize), _defineProperty(_classNames, 'is-' + (desktop.size || desktopSize) + '-desktop', desktop.size || desktopSize), _defineProperty(_classNames, 'is-' + (widescreen.size || widescreenSize) + '-widescreen', widescreen.size || widescreenSize), _defineProperty(_classNames, 'is-' + (fullhd.size || fullhdSize) + '-fullhd', fullhd.size || fullhdSize), _defineProperty(_classNames, 'is-offset-' + (mobile.offset || mobileOffset) + '-mobile', mobile.offset || mobileOffset), _defineProperty(_classNames, 'is-offset-' + (tablet.offset || tabletOffset) + '-tablet', tablet.offset || tabletOffset), _defineProperty(_classNames, 'is-offset-' + (desktop.offset || desktopOffset) + '-desktop', desktop.offset || desktopOffset), _defineProperty(_classNames, 'is-offset-' + (widescreen.offset || widescreenOffset) + '-widescreen', widescreen.offset || widescreenOffset), _defineProperty(_classNames, 'is-offset-' + (fullhd.offset || fullhdOffset) + '-fullhd', fullhd.offset || fullhdOffset), _defineProperty(_classNames, 'is-offset-' + offset, offset), _defineProperty(_classNames, 'is-narrow', narrow), _defineProperty(_classNames, 'is-narrow-mobile', mobile.narrow), _defineProperty(_classNames, 'is-narrow-tablet', tablet.narrow), _defineProperty(_classNames, 'is-narrow-desktop', desktop.narrow), _defineProperty(_classNames, 'is-narrow-widescreen', widescreen.narrow), _defineProperty(_classNames, 'is-narrow-fullhd', fullhd.narrow), _classNames))
        }),
        children
      );
    }
  }]);

  return Column;
}(_react.PureComponent);

Column.displayName = 'Columns.Column';
Column.propTypes = {
  children: _propTypes2.default.node,
  className: _propTypes2.default.string,
  style: _propTypes2.default.shape({}),
  /**
   * The size of the column. the maximun size of a row is 12
   */
  size: _propTypes2.default.oneOf(sizes),
  /**
   * Create horizontal space around Column elements
   */
  offset: _propTypes2.default.oneOf(sizes),
  /**
   * If you want a column to only take the space it needs, use the narrow modifier. The other column(s) will fill up the remaining space.
   */
  narrow: _propTypes2.default.bool,
  /**
   * Size, Offset and Narrow props for Mobile devices (Up to 768px)
   */
  mobile: _propTypes2.default.shape({
    size: _propTypes2.default.oneOf(sizes),
    offset: _propTypes2.default.oneOf(sizes),
    narrow: _propTypes2.default.bool
  }),
  /**
   * Size, Offset and Narrow props for Tablet devices (Between 769px and 1023px)
   */
  tablet: _propTypes2.default.shape({
    size: _propTypes2.default.oneOf(sizes),
    offset: _propTypes2.default.oneOf(sizes),
    narrow: _propTypes2.default.bool
  }),
  /**
  * Size, Offset and Narrow props for Desktop devices (Between 1024px and 1215px)
  */
  desktop: _propTypes2.default.shape({
    size: _propTypes2.default.oneOf(sizes),
    offset: _propTypes2.default.oneOf(sizes),
    narrow: _propTypes2.default.bool
  }),
  /**
  * Size, Offset and Narrow props for WideScreen devices (Between 1216px and 1407px)
  */
  widescreen: _propTypes2.default.shape({
    size: _propTypes2.default.oneOf(sizes),
    offset: _propTypes2.default.oneOf(sizes),
    narrow: _propTypes2.default.bool
  }),
  /**
  * Size, Offset and Narrow props for FullHD devices (1408px and above)
  */
  fullhd: _propTypes2.default.shape({
    size: _propTypes2.default.oneOf(sizes),
    offset: _propTypes2.default.oneOf(sizes),
    narrow: _propTypes2.default.bool
  }),
  /**
   * @deprecated Please use mobile.size prop
   */
  mobileSize: _propTypes2.default.oneOf(sizes),

  /**
   * @deprecated Please use table.size prop
   */
  tabletSize: _propTypes2.default.oneOf(sizes),
  /**
   * @deprecated Please use desktop.size prop
   */
  desktopSize: _propTypes2.default.oneOf(sizes),
  /**
   * @deprecated Please use widescreen.size prop
   */
  widescreenSize: _propTypes2.default.oneOf(sizes),
  /**
   * @deprecated Please use fullhd.size prop
   */
  fullhdSize: _propTypes2.default.oneOf(sizes),
  /**
   * @deprecated Please use mobile.offset prop
   */
  mobileOffset: _propTypes2.default.oneOf(sizes),
  /**
   * @deprecated Please use tablet.offset prop
   */
  tabletOffset: _propTypes2.default.oneOf(sizes),
  /**
   * @deprecated Please use desktop.offset prop
   */
  desktopOffset: _propTypes2.default.oneOf(sizes),
  /**
   * @deprecated Please use widescreen.offset prop
   */
  widescreenOffset: _propTypes2.default.oneOf(sizes),
  /**
   * @deprecated Please use fullhd.offset prop
   */
  fullhdOffset: _propTypes2.default.oneOf(sizes)
};
Column.defaultProps = {
  children: null,
  className: '',
  style: {},
  size: null,
  offset: null,
  narrow: false,
  mobile: {
    size: null,
    offset: null,
    narrow: false
  },
  tablet: {
    size: null,
    offset: null,
    narrow: false
  },
  desktop: {
    size: null,
    offset: null,
    narrow: false
  },
  widescreen: {
    size: null,
    offset: null,
    narrow: false
  },
  fullhd: {
    size: null,
    offset: null,
    narrow: false
  },
  mobileSize: null,
  tabletSize: null,
  desktopSize: null,
  widescreenSize: null,
  fullhdSize: null,
  mobileOffset: null,
  tabletOffset: null,
  desktopOffset: null,
  widescreenOffset: null,
  fullhdOffset: null
};
exports.default = Column;
//# sourceMappingURL=column.js.map
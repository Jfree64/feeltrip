'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Pagination = function (_React$PureComponent) {
  _inherits(Pagination, _React$PureComponent);

  function Pagination() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Pagination);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Pagination.__proto__ || Object.getPrototypeOf(Pagination)).call.apply(_ref, [this].concat(args))), _this), _this.goToPage = function (page) {
      return function (evt) {
        evt.preventDefault();
        _this.props.onChange(page);
      };
    }, _this.firstPage = function (current, total) {
      if (current === 1) {
        return 1;
      }

      var page = current - _this.props.delta * (current === total ? 2 : 1);

      return page <= 0 ? 1 : page;
    }, _this.lastPage = function (current, total) {
      if (current === total) {
        return total;
      }

      var page = current + _this.props.delta * (current === 1 ? 2 : 1);

      return page > total ? total : page;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Pagination, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          current = _props.current,
          total = _props.total,
          next = _props.next,
          previous = _props.previous,
          showPrevNext = _props.showPrevNext,
          delta = _props.delta,
          autoHide = _props.autoHide,
          className = _props.className,
          onChange = _props.onChange,
          props = _objectWithoutProperties(_props, ['current', 'total', 'next', 'previous', 'showPrevNext', 'delta', 'autoHide', 'className', 'onChange']);

      if (total <= 1 && autoHide) {
        return null;
      }

      if (current > total) {
        // eslint-disable-next-line no-console
        console.warn('Pagination controller: Current page can not be greater than total');
        return null;
      }

      var firstPage = this.firstPage(current, total);
      var lastPage = this.lastPage(current, total);

      return _react2.default.createElement(
        'nav',
        _extends({}, props, {
          className: (0, _classnames2.default)('pagination', className),
          'aria-label': 'pagination'
        }),
        showPrevNext && _react2.default.createElement(
          _react2.default.Fragment,
          null,
          _react2.default.createElement(
            'a',
            {
              role: 'button',
              tabIndex: 0,
              onClick: current === 1 ? undefined : this.goToPage(current - 1),
              className: 'pagination-previous',
              title: 'This is the first page',
              disabled: current === 1
            },
            previous
          ),
          _react2.default.createElement(
            'a',
            {
              role: 'button',
              tabIndex: 0,
              onClick: current === total ? undefined : this.goToPage(current + 1),
              className: 'pagination-next',
              disabled: current === total
            },
            next
          )
        ),
        delta > 0 && _react2.default.createElement(
          _react2.default.Fragment,
          null,
          _react2.default.createElement(
            'ul',
            { className: 'pagination-list' },
            Array(lastPage - firstPage + 1).fill(0).map(function (_, i) {
              return (
                // eslint-disable-next-line react/no-array-index-key
                _react2.default.createElement(
                  'li',
                  { key: i + firstPage },
                  _react2.default.createElement(
                    'a',
                    {
                      role: 'button',
                      tabIndex: 0,
                      className: (0, _classnames2.default)('pagination-link', {
                        'is-current': current === i + firstPage
                      }),
                      onClick: current === firstPage + i ? undefined : _this2.goToPage(firstPage + i),
                      'aria-label': 'Page ' + (i + firstPage),
                      'aria-current': 'page'
                    },
                    i + firstPage
                  )
                )
              );
            })
          )
        )
      );
    }
  }]);

  return Pagination;
}(_react2.default.PureComponent);

Pagination.propTypes = {
  /** Current page */
  current: _propTypes2.default.number,
  /** Total pages in total */
  total: _propTypes2.default.number,
  /** Amount og pages to display at the left and right of the current (if delta 2 and current page is 3, the paginator will display pages from 1 to 5) */
  delta: _propTypes2.default.number,
  onChange: _propTypes2.default.func,
  /** Text of the Next button */
  next: _propTypes2.default.node,
  /** Text of the Previous button */
  previous: _propTypes2.default.node,
  showPrevNext: _propTypes2.default.bool,
  autoHide: _propTypes2.default.bool,
  /**
   * Classname of the container of the pagination, this could be used to customize the inner views
   */
  className: _propTypes2.default.string
};
Pagination.defaultProps = {
  total: 1,
  current: 1,
  delta: 1,
  onChange: function onChange() {},
  next: 'Next',
  previous: 'Previous',
  showPrevNext: true,
  autoHide: true,
  className: ''
};
exports.default = Pagination;
//# sourceMappingURL=pagination.js.map
{"version":3,"sources":["../../../src/components/dropdown/dropdown.js"],"names":["colors","concat","Object","keys","COLORS","map","key","Dropdown","props","checkProps","document","addEventListener","close","nextProps","removeEventListener","className","children","value","color","align","hoverable","onChange","current","childrenArray","Children","child","i","cloneElement","type","active","onClick","select","node","htmlElement","state","open","toggle","propTypes","string","style","shape","any","func","oneOf","bool","defaultProps","Item","Divider","console","error","evt","path","find","setState","preventDefault"],"mappings":"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","file":"dropdown.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport CONSTANTS from '../../constants';\nimport DropdownItem from './components/item';\nimport DropdownDivider from './components/divider';\nimport Button from '../button';\nimport Icon from '../icon';\n\nconst colors = [null].concat(Object.keys(CONSTANTS.COLORS).map(key => CONSTANTS.COLORS[key]));\n\nexport default class Dropdown extends PureComponent {\n  static propTypes = {\n    className: PropTypes.string,\n    style: PropTypes.shape({}),\n    children: PropTypes.node,\n    value: PropTypes.any,\n    onChange: PropTypes.func,\n    color: PropTypes.oneOf(colors),\n    align: PropTypes.oneOf(['right']),\n    hoverable: PropTypes.bool,\n  }\n\n  static defaultProps = {\n    className: '',\n    style: {},\n    value: null,\n    children: [],\n    onChange: null,\n    color: null,\n    align: null,\n    hoverable: false,\n  }\n\n  static Item = DropdownItem;\n  static Divider = DropdownDivider;\n\n  constructor(props) {\n    super(props);\n    this.checkProps(props);\n  }\n\n  state = {\n    open: false,\n  }\n\n  componentDidMount() {\n    document.addEventListener('click', this.close);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.checkProps({ ...this.props, ...nextProps });\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('click', this.close);\n  }\n\n  checkProps = (props) => {\n    if (props.value && !props.onChange) {\n      // eslint-disable-next-line no-console\n      console.error('Warning: This is a controlled component without onChange listener, please check the props of the Dropdown component');\n    }\n  }\n\n  close = (evt) => {\n    // IDK yet how to test using the ref in enzime\n    if (this.props.hoverable || (evt && evt.path.find(node => node === this.htmlElement))) {\n      return;\n    }\n    this.setState({ open: false });\n  }\n\n  toggle = (evt) => {\n    if (this.props.hoverable) {\n      return;\n    }\n    if (evt) {\n      evt.preventDefault();\n    }\n    this.setState({ open: !this.state.open });\n  }\n\n  select = value => () => {\n    if (this.props.onChange) {\n      this.props.onChange(value);\n    }\n    this.close();\n  }\n\n  render() {\n    const {\n      className,\n      children,\n      value,\n      color,\n      align,\n      hoverable,\n      onChange,\n      ...props\n    } = this.props;\n    let current = null;\n\n    const childrenArray = React.Children.map(children, (child, i) => {\n      if (i === 0 || child.props.value === value) {\n        current = child.props.children;\n      }\n      return React.cloneElement(child, child.type === DropdownItem ? {\n        active: child.props.value === value,\n        onClick: this.select(child.props.value),\n      } : {});\n    });\n\n    return (\n      <div\n        {...props}\n        ref={(node) => { this.htmlElement = node; }}\n        className={classnames('dropdown', className, {\n          'is-active': this.state.open,\n          [`is-${align}`]: align,\n          'is-hoverable': hoverable,\n        })}\n      >\n        <div className=\"dropdown-trigger\" role=\"presentation\" onClick={this.toggle}>\n          <Button color={color}>\n            <span>{current}</span>\n            <Icon icon=\"angle-down\" size=\"small\" />\n          </Button>\n        </div>\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {childrenArray}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n"]}
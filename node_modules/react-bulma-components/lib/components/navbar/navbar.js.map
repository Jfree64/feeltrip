{"version":3,"sources":["../../../src/components/navbar/navbar.js"],"names":["colors","concat","Object","keys","COLORS","map","key","Navbar","state","showMobileMenu","toggleMenu","setState","props","fixed","window","document","querySelector","classList","add","nextProps","getDerivedStateFromProps","remove","children","className","renderAs","transparent","color","Element","Children","child","includes","type","cloneElement","active","html","PureComponent","Brand","Burger","Menu","Item","Dropdown","Link","Divider","Container","propTypes","node","string","style","shape","bool","oneOfType","func","oneOf","defaultProps"],"mappings":"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","file":"navbar.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport canUseDOM from '../../services/can-use-dom';\nimport Brand from './components/brand';\nimport Burger from './components/burger';\nimport Menu from './components/menu';\nimport Item from './components/item';\nimport Dropdown from './components/dropdown';\nimport Divider from './components/divider';\nimport Link from './components/link';\nimport Container from './components/container';\nimport CONSTANTS from '../../constants';\n\nconst colors = [null].concat(Object.keys(CONSTANTS.COLORS).map(key => CONSTANTS.COLORS[key]));\n\n\nexport default class Navbar extends React.PureComponent {\n  static Brand = Brand\n  static Burger = Burger\n  static Menu = Menu\n  static Item = Item\n  static Dropdown = Dropdown\n  static Link = Link\n  static Divider = Divider\n  static Container = Container\n\n  static propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    style: PropTypes.shape({}),\n    transparent: PropTypes.bool,\n    renderAs: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    fixed: PropTypes.oneOf(['top', 'bottom']),\n    color: PropTypes.oneOf(colors),\n  }\n\n  static defaultProps = {\n    children: null,\n    className: '',\n    style: {},\n    renderAs: 'nav',\n    transparent: false,\n    fixed: null,\n    color: null,\n  }\n\n  static getDerivedStateFromProps(nextProps) {\n    if (!canUseDOM) {\n      return null;\n    }\n    const html = window.document.querySelector('html');\n    html.classList.remove('has-navbar-fixed-top');\n    html.classList.remove('has-navbar-fixed-bottom');\n    if (nextProps.fixed) {\n      html.classList.add(`has-navbar-fixed-${nextProps.fixed}`);\n    }\n    return null;\n  }\n\n  state = {\n    showMobileMenu: false,\n  }\n\n  componentDidMount() {\n    if (this.props.fixed) {\n      window.document.querySelector('html').classList.add(`has-navbar-fixed-${this.props.fixed}`);\n    }\n  }\n\n  // TODO: Remove this on future releases\n  componentWillReceiveProps(nextProps) {\n    Navbar.getDerivedStateFromProps(nextProps);\n  }\n\n  componentWillUnmount() {\n    window.document.querySelector('html').classList.remove(`has-navbar-fixed-${this.props.fixed}`);\n  }\n\n  toggleMenu = () => {\n    this.setState(({ showMobileMenu }) => ({ showMobileMenu: !showMobileMenu }));\n  }\n\n  render() {\n    const {\n      children,\n      className,\n      renderAs,\n      fixed,\n      transparent,\n      color,\n      ...props\n    } = this.props;\n    const Element = renderAs;\n\n    return (\n      <Element\n        {...props}\n        role=\"navigation\"\n        className={classnames('navbar', className, {\n          'is-transparent': transparent,\n          [`is-fixed-${fixed}`]: fixed,\n          [`is-${color}`]: color,\n        })}\n      >\n        {React.Children.map(children, (child) => {\n          if ([Brand].includes(child.type)) {\n            return React.cloneElement(child, { active: this.state.showMobileMenu, toggleMenu: this.toggleMenu });\n          }\n          if ([Menu].includes(child.type)) {\n            return React.cloneElement(child, { active: this.state.showMobileMenu });\n          }\n          return child;\n        })}\n      </Element>\n    );\n  }\n}\n\n"]}
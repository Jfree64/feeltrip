'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames2 = require('classnames');

var _classnames3 = _interopRequireDefault(_classnames2);

var _constants = require('../../../constants');

var _constants2 = _interopRequireDefault(_constants);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var colors = [null].concat(Object.keys(_constants2.default.COLORS).map(function (key) {
  return _constants2.default.COLORS[key];
}));

var Textarea = function (_PureComponent) {
  _inherits(Textarea, _PureComponent);

  function Textarea() {
    _classCallCheck(this, Textarea);

    return _possibleConstructorReturn(this, (Textarea.__proto__ || Object.getPrototypeOf(Textarea)).apply(this, arguments));
  }

  _createClass(Textarea, [{
    key: 'render',
    value: function render() {
      var _classnames;

      var _props = this.props,
          className = _props.className,
          size = _props.size,
          color = _props.color,
          readOnly = _props.readOnly,
          disabled = _props.disabled,
          placeholder = _props.placeholder,
          rows = _props.rows,
          value = _props.value,
          name = _props.name,
          props = _objectWithoutProperties(_props, ['className', 'size', 'color', 'readOnly', 'disabled', 'placeholder', 'rows', 'value', 'name']);

      return _react2.default.createElement('textarea', _extends({
        name: name
      }, props, {
        value: value,
        rows: rows,
        placeholder: placeholder,
        readOnly: readOnly,
        disabled: disabled,
        className: (0, _classnames3.default)('textarea', className, (_classnames = {}, _defineProperty(_classnames, 'is-' + size, size), _defineProperty(_classnames, 'is-' + color, color), _classnames))
      }));
    }
  }]);

  return Textarea;
}(_react.PureComponent);

Textarea.propTypes = {
  className: _propTypes2.default.string,
  style: _propTypes2.default.shape({}),
  size: _propTypes2.default.oneOf(['small', 'medium', 'large']),
  color: _propTypes2.default.oneOf(colors),
  readOnly: _propTypes2.default.bool,
  disabled: _propTypes2.default.bool,
  placeholder: _propTypes2.default.string,
  rows: _propTypes2.default.number,
  value: _propTypes2.default.string,
  /**
   * The name of the input field Commonly used for [multi-input handling](https://reactjs.org/docs/forms.html#handling-multiple-inputs)
   */
  name: _propTypes2.default.string
};
Textarea.defaultProps = {
  className: '',
  style: {},
  size: null,
  color: null,
  readOnly: false,
  disabled: false,
  placeholder: '',
  rows: 4,
  value: '',
  name: ''
};
exports.default = Textarea;
//# sourceMappingURL=textarea.js.map